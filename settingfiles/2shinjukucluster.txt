#
# Default settings for the simulation
#

## シナリオ設定
Scenario.name = %%MovementModel.rngSeed%%
Scenario.simulateConnections = true
Scenario.updateInterval = 0.1
# 43200s == 12h
Scenario.endTime = 43200

## インターフェース固有の設定:
# type : インターフェイスがどのインターフェイス・クラスに属するか
# 異なるタイプの場合，サブパラメーターはインターフェースに固有である
# For SimpleBroadcastInterface, the parameters are:
# transmitSpeed : transmit speed of the interface (bytes per second)
# transmitRange : range of the interface (meters)

# 全ノード用の"Bluetooth"インターフェース
btInterface.type = SimpleBroadcastInterface
# 送信速度： 2 Mbps = 250kBps
btInterface.transmitSpeed = 250k
# 通信範囲
btInterface.transmitRange = 20

# 全ノード用の"Wi-Fi"インターフェース
wfInterface.type = SimpleBroadcastInterface
# 送信速度： 10 Mbps = 1250kBps
wfInterface.transmitSpeed = 1250k
# 通信範囲
wfInterface.transmitRange = 80

# bluetoothとWi-Fiインターフェースを搭載
#Group.nrofInterfaces = 2
#Group.interface1 = btInterface
#Group.interface2 = wfInterface

# ノードグループを定義
Scenario.nrofHostGroups = 8

## グループ固有の設定:
# groupID : グループの識別子．ホスト名の接頭辞として使用されます
# nrofHosts: グループ内のホスト数
# movementModel: ホストの移動モデル（移動パッケージから有効なクラス名）
# waitTime: 目的地に到着してから最小及び最大待機時間（秒）
# speed: パスを移動するときの最小速度と最大速度（m/s）
# bufferSize: メッセージバッファのサイズ (bytes)
# router: メッセージのルーチングに使用されるルーター（ルーチングパッケージの有効なクラス名）
# activeTimes: グループ内のノードがアクティブになっている時間間隔 (start1, end1, start2, end2, ...)
# msgTtl : このホストグループによって作成されたメッセージのTTL（分），デフォルトは無限に設定

## グループと運動モデル特有の設定
# pois: 興味のポイントのインデックスと確率， (poiIndex1, poiProb1, poiIndex2, poiProb2, ... )
#       shortestPathMapBasedMovementの場合
# okMaps : どのマップノードがグループに対して適切か (map file indexes), default=all
#          すべてのMapBasedMovent modelsの場合
# routeFile: ルートのファイルパス - MapRouteMovement用
# routeType: ルートの種類 - MapRouteMovement用


# 全グループ共通の設定
Group.movementModel = ClusterMovement
Group.router = EpidemicRouter
#Group.bufferSize = 5M
Group.waitTime = 0, 120
# 歩行速度
Group.speed = 0.5, 1.5
# メッセージのTTL（分）
# Message TTL of 300 minutes (5 hours)
Group.msgTtl = 60

#Group.nrofHosts = 40

#sendQueue
#1:RANDOM
#2:FIFO
#3:PROPOSAL1(priority FIFO)
#4:PROPOSAL2(priority FIFO+hopcount queue)
#5:HOP TIME NOPRIORITY(hopcount + elapsedtime +fifl queue)
#6:PROPOSAL3(Proposal2 + change in importance queue)

# グループ1（歩行者）固有の設定
Group1.groupID = p
Group1.nrofHosts = 50
Group1.sendQueue = 4
Group1.speed = 0.5,1.5
Group1.buffersize = 20M
Group1.clusterCenter = 470,1100
Group1.clusterRange = 200
Group1.nrofInterfaces = 1
Group1.interface1 = btInterface

# グループ2（歩行者）固有の設定
Group2.groupID = q
Group2.nrofHosts = 50
Group2.sendQueue = 4
Group2.speed = 0.5,1.5
Group2.buffersize = 20M
Group2.clusterCenter = 2580,180
Group2.clusterRange = 200
Group2.nrofInterfaces = 1
Group2.interface1 = btInterface

# グループ3（歩行者）固有の設定
Group3.groupID = r
Group3.nrofHosts = 50
Group3.sendQueue = 4
Group3.speed = 0.5,1.5
Group3.buffersize = 20M
Group3.clusterCenter = 2830,1750
Group3.clusterRange = 200
Group3.nrofInterfaces = 1
Group3.interface1 = btInterface

#グループ4（ドローン）
Group4.groupID = Do
Group4.nrofHosts = 3
Group4.sendQueue = 4
Group4.okMaps = 1
Group4.speed = 10.0,20.0
Group4.buffersize = 10G
Group4.movementModel = MapRouteMovement
#Group4.routeFile = data/cluster1/ferryroute2.wkt
Group4.routeFile = data/cluster1/headquarters2.wkt
Group4.routeType = 1
Group4.waitTime = 0,20
Group4.nrofInterfaces = 1
Group4.interface1 = wfInterface

#グループ5（クラスタ1の情報BOX）
Group5.groupID = box_p
Group5.movementModel = StationaryMovement
Group5.nrofHosts = 1
Group5.sendQueue = 4
Group5.speed = 0,0
Group5.nodeLocation = 470,1100
Group5.buffer = 20G
Group5.nrofInterfaces = 2
Group5.interface1 = btInterface
Group5.interface2 = wfInterface

#グループ6（クラスタ2の情報BOX）
Group6.groupID = box_q
Group6.movementModel = StationaryMovement
Group6.nrofHosts = 1
Group6.sendQueue = 4
Group6.speed = 0,0
Group6.nodeLocation = 2580,180
Group6.buffer = 20G
Group6.nrofInterfaces = 2
Group6.interface1 = btInterface
Group6.interface2 = wfInterface

#グループ7（クラスタ3の情報BOX）
Group7.groupID = box_r
Group7.movementModel = StationaryMovement
Group7.nrofHosts = 1
Group7.sendQueue = 4
Group7.speed = 0,0
Group7.nodeLocation = 2830,1750
Group7.buffer = 20G
Group7.nrofInterfaces = 2
Group7.interface1 = btInterface
Group7.interface2 = wfInterface

#グループ8（区役所の情報BOX）
Group8.groupID = box_s
Group8.movementModel = StationaryMovement
Group8.nrofHosts = 1
Group.sendQueue = 4
Group8.speed = 0,0
Group8.nodeLocation = 1970,890
Group8.buffer = 100G
Group8.nrofInterfaces = 1
Group8.interface1 = wfInterface

## メッセージ作成パラメータ
# イベント・ジェネレーターの数
Events.nrof = 6

## Event1: High priority Data (cluster1)
Events1.class = MessageEventGenerator
Events1.interval = 300
Events1.size = 4M
Events1.hosts = 0,50
Events1.tohosts = 0,156
Events1.prefix = M_Hp

## Event2: High priority Data (cluster2)
Events2.class = MessageEventGenerator
Events2.interval = 300
Events2.size = 4M
Events2.hosts = 50,100
Events2.tohosts = 0,150
Events2.prefix = M_Hq

## Event3: High priority Data (cluster3)
Events3.class = MessageEventGenerator
Events3.interval = 300
Events3.size = 4M
Events3.hosts = 100,150
Events3.tohosts = 0,150
Events3.prefix = M_Hr

## Event4: Low priority Data (cluster1)
Events4.class = MessageEventGenerator
Events4.interval = 180
Events4.size = 2M
Events4.hosts = 0,50
Events4.tohosts = 0,150
Events4.prefix = M_Lp

## Event5: Low priority Data (cluster2)
Events5.class = MessageEventGenerator
Events5.interval = 180
Events5.size = 2M
Events5.hosts = 50,100
Events5.tohosts = 0,150
Events5.prefix = M_Lq

## Event6: Low priority Data (cluster3)
Events6.class = MessageEventGenerator
Events6.interval = 180
Events6.size = 2M
Events6.hosts = 100,150
Events6.tohosts = 0,150
Events6.prefix = M_Lr

## 運動モデルの設定
# 運動モデルの擬似乱数ジェネレーターのシード (default = 0)
MovementModel.rngSeed = [998;47;168;462;1024;3324;4254;4623;5255;5303;5525;5778;5796;6565;6664;6814;6848;7246;7531;7706;8080;8438;8524;9209;9985;10311;14470;14971;15307;16294]
# 暗黙的なサイズ(width, height; meters)がない運動モデルの世界のサイズ
MovementModel.worldSize = 4500, 3400
# 実際のシミュレーションの前に世界のホストを移動するのにどのくらいの時間
MovementModel.warmup = 1000

## 地図に基づく移動 -運動モデルの固有の設定
MapBasedMovement.nrofMapFiles = 2

MapBasedMovement.mapFile1 = data/cluster1/shinjuku.wkt
#MapBasedMovement.mapFile2 = data/cluster1/ferryroute2.wkt
MapBasedMovement.mapFile2 = data/cluster1/headquarters2.wkt


## Reports - すべてのレポート名は有効なレポートクラスでなければならない


# ロードするレポートの数
Report.nrofReports = 4
# ウォームアップ期間の長さ (シミュレーション秒数)
Report.warmup = 0
# レポートのデフォルトディレクトリ (出力設定でレポートごとに上書き可能)
Report.reportDir = Kondo_Hiroto/yobizikken/cluster/@99


# ロードするレポートクラス
Report.report1 = CreatedMessagesReport
Report.report2 = DeliveredMessagesReport
Report.report3 = EventLogReport
Report.report4 = EventLogReport_pri


## 一部のルータ設定のデフォルト設定
ProphetRouter.secondsInTimeUnit = 30
SprayAndWaitRouter.nrofCopies = 6
SprayAndWaitRouter.binaryMode = true

## 最適化設定 -- これらはシミュレーションの速度に影響します
## 詳細はWorld classを参照してください
Optimization.cellSizeMult = 5
Optimization.randomizeUpdateOrder = true


## GUIの設定

# GUIアンダーレイ画像設定
GUI.UnderlayImage.fileName = data/helsinki_underlay.png
# ピクセル単位の画像オフセット (x, y)
GUI.UnderlayImage.offset = 64, 20
# 画像の拡大縮小率
GUI.UnderlayImage.scale = 4.75
# 画像回転 (ラジアン)
GUI.UnderlayImage.rotate = -0.015

# ログパネルに表示するイベント数 (default = 30)
GUI.EventLogPanel.nrofEvents = 100
# 正規表現ログフィルタ (REマッチングの詳細については，Java APIのパターンクラスを参照)
#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$