#
# Preliminary experiment settings for the simulation@demo
#

## シナリオ設定
Scenario.name = %%MovementModel.rngSeed%%
Scenario.simulateConnections = true
Scenario.updateInterval = 0.1
# 43200s == 12h
Scenario.endTime = 43200

## インターフェース固有の設定:
# type : インターフェースがどのインターフェースクラスに属するか
# さまざまな型の場合，サブパラメータはインターフェース固有です．
# SimpleBroadcastInterfaceの場合，パラメータは次のとおりです．
# transmitSpeed : インターフェースの送信速度(1秒あたりのバイト数)
# transmitRange : インターフェースの範囲(メートル)

# 全ノード用の"Bluetooth"インターフェース
btInterface.type = SimpleBroadcastInterface
# 送信速度: 2 Mbps = 250kBps
btInterface.transmitSpeed = 250k
# 通信範囲
btInterface.transmitRange = 15

# ノードグループを定義
Scenario.nrofHostGroups = 5

## グループ固有の設定:
# groupID : グループの識別子．ホスト名の接頭辞として使用されます．
# nrofHosts: グループ内のホスト数
# movementModel: ホストの移動モデル（移動パッケージから有効なクラス名）
# waitTime: 目的地に到着してから最小及び最大待機時間（秒）
# speed: パスを移動するときの最小速度と最大速度（m/s）
# bufferSize: メッセージバッファのサイズ (bytes)
# router: メッセージのルーチングに使用されるルーター（ルーチングパッケージの有効なクラス名）
# activeTimes: グループ内のノードがアクティブになっている時間間隔 (start1, end1, start2, end2, ...)
# msgTtl : このホストグループによって作成されたメッセージのTTL（分）．デフォルトの設定は無限．

## グループと運動モデル特有の設定
# pois: 興味のポイントのインデックスと確率， (poiIndex1, poiProb1, poiIndex2, poiProb2, ... )
#       shortestPathMapBasedMovementの場合
# okMaps : どのマップノードがグループに対して適切か (map file indexes), default=all
#          すべてのMapBasedMovent modelsの場合
# routeFile: ルートのファイルパス - MapRouteMovement用
# routeType: ルートの種類 - MapRouteMovement用

#全グループ共通の設定
# 移動モデル RandomWaypoint
Group.movementModel = ShortestPathMapBasedMovement
# ルーチング EpidemicRouting
Group.router = EpidemicRouter
# バッファサイズ
Group.bufferSize = 20M
# 待機時間
Group.waitTime = 0, 120
# すべてのノードはbluetoothインターフェースを持っています．
Group.nrofInterfaces = 1
#　通信インタフェース Bluetooth
Group.interface1 = btInterface
# 歩行速度
Group.speed = 0.5,1.5
#送信順番
#1:RANDOM
#2:FIFO
#3:Priority FIFO
#4:Priority FIFO + hopcount + elpased time
#5:hopcount + elpased time
#TTLの設定
Group.msgTtl = 1000

Group1.groupID = Ip
Group1.nrofHosts = 30
Group1.sendQueue = 4
Group1.speed = 0.5,1.5
Group1.buffersize = 60M


Group2.groupID = Ic
Group2.nrofHosts = 30
Group2.sendQueue = 4
Group2.okMaps = 1
Group2..speed = 2.7,13.9
Group2.buffersize = 60M


Group3.groupID = p
Group3.nrofHosts = 270
Group3.sendQueue = 4
Group3.speed = 0.5,1.5
Group3.buffersize = 20M


Group4.groupID = c
Group4.nrofHosts = 270
Group4.sendQueue = 4
Group4.okMaps = 1
Group4.speed = 2.7, 13.9
Group4.buffersize = 20M

Group5.groupID = server
Group5.movementModel = StationaryMovement
Group5.nrofHosts = 1
Group5.sendQueue = 4
Group5.speed = 0,0
Group5.nodeLocation = 1400,690
Group5.buffer = 20G



Events.nrof = 5

## Event1: Fake High priority Data
Events1.class = MessageEventGenerator
Events1.interval = 1200
Events1.size = 4M
Events1.hosts = 0,59
Events1.tohosts = 0,599
Events1.prefix = FMH_

## Event2: High priority Data
Events2.class = MessageEventGenerator
Events2.interval = 1200
Events2.size = 4M
Events2.hosts = 600,601
Events2.tohosts = 0,599
Events2.prefix = M_H_

## Event3: Low priority Data
Events3.class = MessageEventGenerator
Events3.interval = 60
Events3.size = 2M
Events3.hosts = 60,599
Events3.tohosts = 0,599
Events3.prefix = M_L_

## Event4: Key event
Events4.class = MessageEventGenerator
Events4.interval = 10
Events4.size = 1
Events4.hosts = 600,601
Events4.tohosts = 60,599
Events4.time = 0,1
Events4.ttl = 43200
Events4.prefix = KEY_

## Event5: Fake Key event
Events5.class = MessageEventGenerator
Events5.interval = 10
Events5.size = 1
Events5.hosts = 0,59
Events5.tohosts = 0,599
Events5.time = 0,1
Events5.ttl = 43200
Events5.prefix = FK_


## 移動モデルの設定
# 運動モデルの擬似乱数ジェネレータのシード (default = 0)
#MovementModel.rngSeed 
MovementModel.rngSeed = [154;159;663;913;1024;3324;4254;4623;5255;5303;5525;5778;5796;6565;6664;6814;6848;7246;7531;7706;8080;8438;8524;9209;9985;10311;14470;14971;15307;16294]
# 暗黙的なサイズ(width, height; meters)がない運動モデルの世界のサイズ
MovementModel.worldSize = 4500, 3400
# 実際のシミュレーションの前に世界のホストを移動するのにどのくらいの時間
# MovementModel.warmup = 0

## Map based movement -移動モデルの固有の設定
MapBasedMovement.nrofMapFiles = 1

MapBasedMovement.mapFile1 = data/shinjuku.wkt

## Reports - すべてのレポート名は有効なレポートクラスでなければなりません．

# ロードするレポート数
Report.nrofReports = 4
# ウォームアップ期間の長さ (シミュレート秒数)
Report.warmup = 0
# レポートのデフォルトディレクトリ(レポートごとに出力設定で上書き可能)
Report.reportDir = reports/main/@10


# ロードするレポートクラス
Report.report1 = CreatedMessagesReport
Report.report2 = EventLogReport_pri
Report.report3 = EventLogReport_prifix
Report.report4 = Transmitprobability


## 一部のルータ設定のデフォルト設定
ProphetRouter.secondsInTimeUnit = 30
SprayAndWaitRouter.nrofCopies = 6
SprayAndWaitRouter.binaryMode = true

## 最適化設定 -- これらはシミュレーションの速度に影響します．
## 詳細はWorld classを参照してください.
Optimization.cellSizeMult = 5
Optimization.randomizeUpdateOrder = true


## GUIの設定

# GUIアンダーレイ画像設定
GUI.UnderlayImage.fileName = data/helsinki_underlay.png
# ピクセル単位の画像オフセット (x, y)
GUI.UnderlayImage.offset = 64, 20
# 画像の拡大縮小率
GUI.UnderlayImage.scale = 4.75
# 画像回転 (ラジアン)
GUI.UnderlayImage.rotate = -0.015

# ログパネルに表示するイベント数 (default = 30)
GUI.EventLogPanel.nrofEvents = 100
# 正規表現ログフィルタ (REマッチングの詳細については，Java APIのパターンクラスを参照)
#GUI.EventLogPanel.REfilter = .*p[1-9]<->p[1-9]$